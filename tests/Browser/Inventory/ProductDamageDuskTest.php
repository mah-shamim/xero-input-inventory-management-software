<?php

namespace Tests\Browser\Inventory;

use App\Models\Inventory\ProductDamage;
use App\Models\Inventory\Warehouse\Warehouse;
use Laravel\Dusk\Browser;
use Tests\DuskTestCase;

class ProductDamageDuskTest extends DuskTestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = $this->seed_and_getUser();
        $this->page = '/inventory/productdamages';
        $this->data = $this->product_seed_only($this->user);
        $this->product = $this->data['product'][0];
        $this->warehouse = Warehouse::factory()->create(['company_id' => $this->user->company_id]);
    }

    /**
     * @test
     */
    public function index_product_damage_dusk(): void
    {
        $this->browse(function (Browser $browser) {
            $browser->loginAs($this->user)
                ->visit($this->page)
                ->pause(200)
                ->assertSee('Product Damage');
        });
    }

    /**
     * @test
     * @todo need to add warehouse name in the dropdown
     */
    public function create_product_damage_dusk(): void
    {
        $this->warehouse->products()->attach([
            $this->product->id => [
                'unit_id' => $this->product->base_unit_id,
                'quantity' => 1
            ],
        ]);

        $this->browse(function (Browser $browser) {
            $browser->loginAs($this->user)
                ->visit($this->page)
                ->assertSee('Product Damage')
                ->waitFor('tbody tr')
                ->pause(1000)
                ->actionDialogOpen('Create Product Damage')
                ->pause(200)
                ->vAutocompleteWithSelector('@search_warehouse', 'warehouse_id', $this->warehouse->code)
                ->pause(1000)
                ->vAutocompleteWithSelector('@search_product', 'product_id', $this->product->name)
                ->pause(100)
                ->vAutocompleteWithSelector('@search_unit', 'unit_id', $this->data['units'][0]->key)
                ->type('@quantity', $quantity = rand(1, 2))
                ->type('@sale_value', $this->product->price * $quantity)
                ->press('@submit')
                ->pause(100)
                ->seeSweetAlertSuccessMessage('Product Damage has been created successfully')
                ->waitFor('tbody tr .text-left')
                ->assertSee($this->product->name);
        });
    }

    /**
     * @test
     */
    public function update_product_damage_dusk(): void
    {
        $this->browse(function (Browser $browser) {
            $browser->loginAs($this->user);
            $data = $this->data;
            $this->seed_product_damage($data['units']);
            $browser->visit($this->page)
                ->assertSee('Product Damage')
                ->waitFor('tbody tr')
                ->pause(1000)
                ->assertSee($this->product->name)
                ->actionDialogOpen('Update Product Damage', '@edit-0')
                ->vAutocompleteWithSelector('@search_unit', 'unit_id', $this->data['units'][1]->key)
                ->press('@submit')
                ->pause(100)
                ->seeSweetAlertSuccessMessage('Product Damage has been updated successfully')
                ->waitFor('tbody tr .text-left')
                ->assertSee($this->product->name)->pause(10000);
        });
    }

    /**
     * @test
     */
    public function delete_product_damage_dusk(): void
    {
        $this->browse(function (Browser $browser) {
            $browser->loginAs($this->user);
            $data = $this->data;
            $this->seed_product_damage($data['units']);

            $browser->visit($this->page)
                ->assertSee('Product Damage')
                ->waitFor('tbody tr')
                ->waitFor('tbody tr .text-left')
                ->assertSee($this->product->name)
                ->clickSwalDeleteButton();

            $browser->pause(1000)
                ->seeSweetAlertDeleteMessage('Product Damage has been deleted successfully');
        });
    }

    /**
     * @test
     */
    public function search_product_damage_dusk(): void
    {
        $this->browse(function (Browser $browser) {
            $data = $this->data;
            $this->seed_product_damage($data['units']);

            $browser->loginAs($this->user);
            $browser->visit($this->page)
                ->assertSee('Product Damage')
                ->waitFor('tbody tr')
                ->waitFor('tbody tr .text-left')
                ->type('@search', $this->product->name)
                ->pause(1000)
                ->waitFor('tbody tr')
                ->assertSee($this->product->name);
        });
    }

    /**
     * @param $units
     * @return void
     */
    function seed_product_damage($units): void
    {
        $this->warehouse->products()->attach([
            $this->product->id => [
                'unit_id' => $units[0]->id,
                'quantity' => 1
            ],
            $this->product->id => [
                'unit_id' => $units[1]->id,
                'quantity' => 1
            ]
        ]);
        ProductDamage::create([
            'warehouse_id' => $this->warehouse->id,
            'product_id' => $this->product->id,
            'unit_id' => $this->product->base_unit_id,
            'quantity' => $quantity = rand(1, 5),
            'sale_value' => $this->product->price * $quantity,
            'company_id' => $this->user->company_id
        ]);
    }
}
